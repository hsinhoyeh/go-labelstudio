/*
 * Label Studio API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v1.11.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"time"
)

type DataManagerTaskSerializer struct {
	Id                       int32        `json:"id,omitempty"`
	Predictions              string       `json:"predictions,omitempty"`
	Annotations              []Annotation `json:"annotations,omitempty"`
	Drafts                   string       `json:"drafts,omitempty"`
	Annotators               string       `json:"annotators,omitempty"`
	InnerId                  int32        `json:"inner_id,omitempty"`
	CancelledAnnotations     int32        `json:"cancelled_annotations,omitempty"`
	TotalAnnotations         int32        `json:"total_annotations,omitempty"`
	TotalPredictions         int32        `json:"total_predictions,omitempty"`
	CompletedAt              time.Time    `json:"completed_at,omitempty"`
	AnnotationsResults       string       `json:"annotations_results,omitempty"`
	PredictionsResults       string       `json:"predictions_results,omitempty"`
	PredictionsScore         float32      `json:"predictions_score,omitempty"`
	FileUpload               string       `json:"file_upload,omitempty"`
	StorageFilename          string       `json:"storage_filename,omitempty"`
	AnnotationsIds           string       `json:"annotations_ids,omitempty"`
	PredictionsModelVersions string       `json:"predictions_model_versions,omitempty"`
	AvgLeadTime              float32      `json:"avg_lead_time,omitempty"`
	DraftExists              bool         `json:"draft_exists,omitempty"`
	UpdatedBy                string       `json:"updated_by,omitempty"`
	// User imported or uploaded data for a task. Data is formatted according to the project label config. You can find examples of data for your project on the Import page in the Label Studio Data Manager UI.
	Data interface{} `json:"data"`
	// Meta is user imported (uploaded) data and can be useful as input for an ML Backend for embeddings, advanced vectors, and other info. It is passed to ML during training/predicting steps.
	Meta interface{} `json:"meta,omitempty"`
	// Time a task was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Last time a task was updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// True if the number of annotations for this task is greater than or equal to the number of maximum_completions for the project
	IsLabeled bool `json:"is_labeled,omitempty"`
	// Number of distinct annotators that processed the current task
	Overlap int32 `json:"overlap,omitempty"`
	// Number of comments in the task including all annotations
	CommentCount int32 `json:"comment_count,omitempty"`
	// Number of unresolved comments in the task including all annotations
	UnresolvedCommentCount int32 `json:"unresolved_comment_count,omitempty"`
	// When the last comment was updated
	LastCommentUpdatedAt time.Time `json:"last_comment_updated_at,omitempty"`
	// Project ID for this task
	Project int32 `json:"project,omitempty"`
	// Users who wrote comments
	CommentAuthors []int32 `json:"comment_authors,omitempty"`
}
